"""empty message

Revision ID: b17d6d44a63b
Revises: 
Create Date: 2023-05-13 01:02:41.199628

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b17d6d44a63b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "account_types",
        sa.Column("account_type_id", sa.INTEGER(), nullable=False),
        sa.Column("account_type_name", sa.VARCHAR(length=100), nullable=False),
        sa.PrimaryKeyConstraint("account_type_id", name=op.f("pk_account_types")),
    )
    op.create_table(
        "categories",
        sa.Column("category_id", sa.INTEGER(), nullable=False),
        sa.Column("category_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("category_parent_id", sa.INTEGER(), nullable=True),
        sa.Column("category_parent_name", sa.VARCHAR(length=100), nullable=True),
        sa.PrimaryKeyConstraint("category_id", name=op.f("pk_categories")),
    )
    op.create_table(
        "merchants",
        sa.Column("merchant_id", sa.BIGINT(), nullable=False),
        sa.Column("merchant_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("merchant_pattern", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("merchant_id", name=op.f("pk_merchants")),
    )
    op.create_table(
        "net_worth_by_day",
        sa.Column("net_worth_date", sa.DATE(), nullable=False),
        sa.Column("assets_amount", sa.NUMERIC(precision=19, scale=4), nullable=True),
        sa.Column("debts_amount", sa.NUMERIC(precision=19, scale=4), nullable=True),
        sa.Column("net_amount", sa.NUMERIC(precision=19, scale=4), nullable=True),
        sa.PrimaryKeyConstraint("net_worth_date", name=op.f("pk_net_worth_by_day")),
    )
    op.create_table(
        "transaction_types",
        sa.Column("transaction_type_id", sa.INTEGER(), nullable=False),
        sa.Column("transaction_type_name", sa.VARCHAR(length=100), nullable=False),
        sa.PrimaryKeyConstraint(
            "transaction_type_id", name=op.f("pk_transaction_types")
        ),
    )
    with op.batch_alter_table("transaction_types", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_transaction_types_transaction_type_name"),
            ["transaction_type_name"],
            unique=True,
        )

    op.create_table(
        "accounts",
        sa.Column("account_id", sa.BIGINT(), nullable=False),
        sa.Column("account_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("status", sa.VARCHAR(length=100), nullable=True),
        sa.Column("closed", sa.BOOLEAN(), nullable=True),
        sa.Column("current_balance", sa.NUMERIC(precision=19, scale=4), nullable=True),
        sa.Column("currency_type", sa.VARCHAR(length=20), nullable=True),
        sa.Column("financial_institution_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column(
            "mint_last_updated_on", postgresql.TIMESTAMP(timezone=True), nullable=True
        ),
        sa.Column(
            "mint_created_on", postgresql.TIMESTAMP(timezone=True), nullable=True
        ),
        sa.Column("account_type_id", sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_type_id"],
            ["account_types.account_type_id"],
            name=op.f("fk_accounts_account_type_id_account_types"),
        ),
        sa.PrimaryKeyConstraint("account_id", name=op.f("pk_accounts")),
    )
    op.create_table(
        "transactions",
        sa.Column("transaction_id", sa.BIGINT(), nullable=False),
        sa.Column("transaction_type_id", sa.INTEGER(), nullable=True),
        sa.Column("account_id", sa.BIGINT(), nullable=True),
        sa.Column("transaction_date", sa.DATE(), nullable=True),
        sa.Column("transaction_description", sa.VARCHAR(length=250), nullable=True),
        sa.Column(
            "transaction_amount", sa.NUMERIC(precision=19, scale=4), nullable=True
        ),
        sa.Column("is_debit", sa.BOOLEAN(), nullable=True),
        sa.Column("is_expense", sa.BOOLEAN(), nullable=True),
        sa.Column("merchant_id", sa.BIGINT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.account_id"],
            name=op.f("fk_transactions_account_id_accounts"),
        ),
        sa.ForeignKeyConstraint(
            ["merchant_id"],
            ["merchants.merchant_id"],
            name=op.f("fk_transactions_merchant_id_merchants"),
        ),
        sa.ForeignKeyConstraint(
            ["transaction_type_id"],
            ["transaction_types.transaction_type_id"],
            name=op.f("fk_transactions_transaction_type_id_transaction_types"),
        ),
        sa.PrimaryKeyConstraint("transaction_id", name=op.f("pk_transactions")),
    )
    with op.batch_alter_table("transactions", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_transactions_transaction_date"),
            ["transaction_date"],
            unique=False,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("transactions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_transactions_transaction_date"))

    op.drop_table("transactions")
    op.drop_table("accounts")
    with op.batch_alter_table("transaction_types", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_transaction_types_transaction_type_name"))

    op.drop_table("transaction_types")
    op.drop_table("net_worth_by_day")
    op.drop_table("merchants")
    op.drop_table("categories")
    op.drop_table("account_types")
    # ### end Alembic commands ###
